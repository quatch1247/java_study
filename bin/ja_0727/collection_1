.Collection(컬렉션)

:자바에서는 많은 수의 다양한 패키지를 제공하여 개발자들이 자바 어플리케이션을
쉽게 개발할 수 있도록 도와준다.

.Collection Framework(컬렉션 프레임워크)
	: 다수의 데이터를 쉽게 처리할 수 있는 표준화된 방법을 제공하는 클래스
	
.형식화 클래스 : 데이터를 표준화된 형식으로 출력하는데 도움을 주는 클래스

	: 컬렉션 프레임워크란 데이터군을 저장하는(Vector와 같은) 클래스들을 표준화한 설계를 뜻한다.
	
	Collection은 다수의 데이터 즉 데이터 그룹을, Framework은 표준화된 프로그래밍 방식을 의미한다.
	
	Java API 문서에서는 컬렉션 프레임웍을 데이터군을 다루고 표현하기 위한 단일화된 구조라고 정의 하고 있다.
	
	
	컬렉션 프레임웍의 핵심 인터페이스
	
	:List와 Set을 구현한 컬렉션 클래스들은 서로 공통점이 많아 공통된 부분을 다시 뽑아 Collection 인터페이스를
	정의 할 수 있었지만 Map인터페이스는 이들과는 전혀 다른 형태로 컬렉션(데이터군)을 다루기 때문에 같은 상속 계층도에
	포함되지 못하였다.
	
	****************** 중요 ****************************
	
	인터페이스			특징
	List		순서가 있는 데이터의 집합, 데이터의 중복을 허용한다.
	Set			순서가 없는 데이터의 집합, 데이터의 중복을 허용하지 않는다.
	Map 		Key와 Value의 쌍으로 이루어진 데이터의 집합 순서는 유지되지 않으며, 키는 중복을 허용하지 않고
				값은 중복을 허용한다.
				
	*****************************************************			
				
	Vector와 ArrayList
	:Vector와 ArrayList는 컬렉션 프레임웍에서 가장 많이 사용되는 컬렉션 클래스 입니다.
	이들은 List 인터페이스를 구현하기 때문에 데이터의 저장순서가 유지되고 중복을 허용한다는
	공통적인 특징을 갖는다.
	
	ArrayList는 기존 Vector를 개선한 것으로 Vector와 구현원리와 기능적인 측면에서 동일하다고 할 수 있다.
	
			공통점								차이점	
	List 인터페이스를 구현한다.				Vector는 멀티스레드에 대한 동기화가					
	저장 순서가 유지되고 중복을 허용한다.			되어 있으나 ArrayList는 아니다
	데이터의 저장 공간으로 배열을 사용한다.
	
	형식화 클래스
	
	
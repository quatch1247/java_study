.Thread

Thread에서 run() 대신 start()를 호출하는 이유

.쓰레드를 실행할 때 직접 run() 메소드를 호출하지 않고 start()메소드를 호출하는 이유가 있습니다.
프로세스나 스레드가 실행된다는 의미는 CPU를 사용해 작업을 수행하는 것을 뜻합니다. 그런데 한번에 한가지
작업만 처리하는 것이 아니고 동시에 2가지 이상의 작업을 처리하는 멀티 프로세싱을 위해서는 CPU 스케쥴링이
필요합니다. 운영체제는 보다 효율적으로 사용하기 위해 작업의 우선순위를 정해 처리합니다.
결국 CPU사용 권한을 정하는 것은 프로그램이 아니라 운영체제의 몫입니다.
start()메소드는 스레드를 실행 가능한 상태 즉 쓰레드가 CPU를 사용할 수 있도록 준비 상태를 만드는 역할을
합니다. 그리고 CPU 스케쥴러에 의해 run() 메소드를 호출해 실제 CPU를 사용하는 상태로 바뀝니다.

.쓰레드 우선순위 지정
:멀티 스레드는 여러개의 스레드가 동시에 실행된다고 하였지만
이것은 일반적인 설명이고 실제로는 그렇지 않습니다.
대부분의 컴퓨터는 한개의 CPU만 가지고 있습니다.
그렇기 때문에 실제로 여러 쓰레드 중에서 하나의 쓰레드만 수행합니다.
쓰레드가 작동하는 방식은 하나의 쓰레드가 종료할 때까지 CPU를 독점하는 것이
아니고 여러개의 쓰레드를 번갈아가며 처리합니다.
이처럼 여러개의 쓰레드를 교차하면서 처리하는 것을 스케쥴링 이라고 합니다.
여러개의 쓰레드 중에서 어떤 쓰레드가 CPU를 사용할지는
쓰레드 스케쥴러가 결정해 처리합니다. 따라서 자바쓰레드의 정확한 작동을
예측하기는 힙듭니다. 하지만 setPriority() 메소드를 이용해
우선순위를 부여할 수 있습니다.


자바는 총 10단계 우선순위를 갖습니다. 그중에서 3가지 우선순위는 Thread 
클래스의 멤버 상수로 정의되어 있습니다.

static final int MAX_PRIORITY : 쓰레드가 가지는 최고 우선순위값
static final int MIN_PRIORITY : 쓰레드가 가지는 최소 우선순위값
static final int NORM_PRIORITY : 쓰레드가 가지는 보통 우선순위값


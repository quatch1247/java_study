.Generics(제너릭)

:제너릭스는 JDK 1.5에서의 가장 큰 변화 중 하나로 다양한 타입의 객체를
다루는 메소드나, 컬렉션 클래스에 컴파일시의 Type check을 해주는 기능이다.

객체의 타입을 컴파일시에 해주기 때문에 객체의 타입 안정성을 높이고 형 변환의 번거로움이
줄어든다.

ArrayList와 같은 컬렉션의 클래스는 다양한 종류의 객체를 담을 수 있긴 하지만
보통 한 종류의 ㄱ객체를 담는 경우가 많다. 그런데도 꺼낼때마다 타입을 체크하고
형변환 하는 것은 불편하다

제너릭스는
1.타입 안정성을 제공한다.
2.타입 체크와 형변환을 생략할 수 있으므로 코드가 간결해 진다.

자바에서 제너릭이란 데이터의 차입을 일반화한다는 것을 의미한다.

제너릭은 클래스나 메소드에서 사용할 내부 데이터 타입을 컴파일시에 미리 지정하는 방법이다.

이렇게 컴파일 시에 미리 타입검사를 수행하면 다음과 같은 장점이 있다.

1. 클래스나 메소드 내부에서 사용되는 객체의 타입 안정성을 높일 수 있다.
2. 반환값에 대한 타입변환 및 타입검사에 들어가는 노력을 줄일 수 있다.

JDK 1.5 이전에는 여러 타입을 사용하는 대부분의 클래스나 메소드에서
인수나 반환값으로 Object 타입을 사용했다.

하지만 이 경우에는 반환된 Object 객체를 다시 원하는 타입으로 타입변환해야 하며,
이때 오류가 발생할 가능성도 존재한다.

하지만 JDK 1.5부터 도입된 제너릭을 사용하면 컴파일 시에 미리 타입이 정해지므로,
타입 검사나 타입변환과 같은 번거로운 작업을 생략할 수 있게 된다.


제너릭의 제거 시기

자바 코드에서 선언되고 사용된 제너릭 타입은 컴파일시 컴파일러에 의해 자동으로 검사되어 타입 변환된다.

이런식으로 동작하는 이유는 제너릭을 사용하지 않는 코드와의 호환성을 유지하기 위해서이다.

제너릭은 다룰 객체 타입을 미리 명시해 줌으로써 형 변환 하지 않아도 되게 하는 것이다.

제너릭스는 참조형 타입, 간단히 말해서 Type을 의미하는 T를 사용한다 어떠한 참조형 타입도 가능하다는 뜻이다.
뿐만아니라 요소를 의미한는 E, k, V도 사용한다 이들의 기호의 종류만 다를뿐 임의의 참조형 타입을 의미한다는것은
모두 같다. 기존의 다양한 종류의 타입을 다루는 메소드의 매개 변수나 리턴 타입으로 Object 타입의 참조 변수를
많이 사용했고 그로 인해 형변환이 불가피 했지만 이제 Object 타입대신 원하는 타입을 지정하기만 하면 된다.

제너릭은 클래스 내부에서 지정하는 것이 아닌 외부에서 사용자에 의해 지정되는 것을 의미한다.
한마디로 특정 타입을 미리 지정해주는 것이 아닌 필요에 의해 지정할 수 있도록 하는 일반 타입이라는 것이다.

형식
<>
